@model CRM.WebUI.Models.QuerySettingViewModel

@{
    CRM.Domain.Entities.Account accountDisplay = new CRM.Domain.Entities.Account();
    ViewData["Title"] = "Accounts List";
}

@section SideBar {
    <div class="panel panel-primary" style="margin:5px;">
        <div class="panel-heading">
             <span class="h4"><i class="fa fa-filter fa-fw" aria-hidden="true"></i>Filter</span>
        </div>
        <div class="panel-body">
            <form asp-action="SetQuery" method="post" >
                <div class="form-actions no-color">
                    @Html.Hidden("search", Newtonsoft.Json.JsonConvert.SerializeObject(Model.search), new { id = "query_search" })
                    @Html.Hidden("sort", Newtonsoft.Json.JsonConvert.SerializeObject(Model.sort), new { id = "query_sort" })
                    @Html.Hidden("offset", Model.offset.ToString(), new { id = "query_offset" })

                    <label for="AccountName">Account Name:</label>
                    <input id="AccountName " class="form-control crm-query" placeholder="Name" />
                    <br class="divider" />
                    <label for="AccountType">Account Type:</label>
                    <select class="form-control crm-query" id="AccountType">
                        <option value="">-- Select a type --</option>
                        <option value="0">Agent</option>
                        <option value="1">Institut</option>
                        <option value="2">Other</option>
                    </select>
                    <br class="divider" />
                    <label for="AccountOwner">Account Owner:</label>
                    <input id="AccountOwner" class="form-control crm-query" placeholder="User Name" />
                    <br class="divider"/>
                    <button onclick="applyFilter(true)" class="btn btn-info btn-sm"><i class="fa fa-fw fa-check"></i>Apply</button>&nbsp;&nbsp;
                    <button onclick="applyFilter(false)" class="btn btn-default btn-sm"><i class="fa fa-fw fa-eraser"></i>Clear</button>
                    <button type="button" class="btn btn-sm" onclick="CRM.saveFilter()"></button>
                </div>
            </form>
        </div>
    </div>
}


    <form asp-area="" asp-controller="Accounts" asp-action="Create" method="get" id="toolForm" >
        <span class="h3">@ViewData["Title"]</span>&nbsp;&nbsp;
        <button type="submit" class="btn btn-sm btn-success pull-right">
            <i class="glyphicon glyphicon-plus"></i> Create
        </button>
    </form>
<table id="accountsTable">
</table>

@section Scripts
{
    <script>
        restoreFilter();

        $("#crm-accounts").addClass('active');
        $table = $("#accountsTable");
        $table.bootstrapTable({
            url: "/api/Accounts",
                height: CRM.getHeight(),
                clickToSelect: true,
                sidePagination: 'server',
                pagination: true,
                toolbar: "#toolForm",
                idField: "accountID",
                queryParams: function (Param) { Param.search = CRM.getFilter(); Param.sort = CRM.getSort; return Param;},
                pageNumber: CRM.getPagination().pageNumber,
                pageSize: CRM.getPagination().pageSize,
                columns: [{
                    field: 'state',
                    title: '',
                    radio: true,
                }, {
                    field: 'accountID',
                    title: 'Account ID',
                    visible: false
                }, {
                    field: 'name',
                    title: '@Html.DisplayNameFor(model => accountDisplay.Name)',
                }, {
                    field: 'shortName',
                    title: '@Html.DisplayNameFor(model => accountDisplay.ShortName)',
                }, {
                    field: 'accountType',
                    title: '@Html.DisplayNameFor(model => accountDisplay.AccountType)',
                    formatter: CRM.convertAccountType,
                }, {
                    field: 'contactName',
                    title: '@Html.DisplayNameFor(model => accountDisplay.ContactName)',
                }, {
                    field: 'birthdate',
                    title: '@Html.DisplayNameFor(model => accountDisplay.Birthdate)',
                    formatter: CRM.formatDate,
                }, {
                    field: 'eMail',
                    title: '@Html.DisplayNameFor(model => accountDisplay.EMail)',
                }, {
                    field: 'mobile',
                    title: '@Html.DisplayNameFor(model => accountDisplay.Mobile)',
                }, {
                    field: 'registerDate',
                    title: '@Html.DisplayNameFor(model => accountDisplay.RegisterDate)',
                    formatter: CRM.formatDate,
                }, {
                    field: 'accountOwner.userName',
                    title: '@Html.DisplayNameFor(model => accountDisplay.AccountOwnerID)',
                },]
            });

        $table.on('check.bs.table', function () {
            accounts_onSelect($table.bootstrapTable('getSelections'));
            //$table.bootstrapTable("destory");
        });

        $table.on('page-change.bs.table', function (number, size) {
            CRM.savePagination("AccountsList", { pageNumber: number, pageSize: size });
        }); 

        function accounts_onSelect(eSelect)
        {
            if (eSelect != null) {
                window.location.href = "/Accounts/Details/"+eSelect[0].accountID.toString().trim();
            }
        }

        function applyFilter(enable) {
            var item = {};
            item.field = "";
            item.value = "";

            if (enable){
                AccountType = $("#AccountType").val();
                AccountName = $("#AccountName").val().trim();
                AccountOwner = $("#AccountOwner").val().trim();;
                $("#query_search").val(JSON.stringify(
                    [{ field: 'AccountType', value: AccountType },
                        { field: 'AccountName', value: AccountName },
                        { field: 'AccountOwner', value: AccountOwner }]));
            }
            else {
                $("#query_search").val("");
            }
            $(this).closest('form').submit();
        }

        function restoreFilter() {
            var filter = $("#query_search").val();
            if (filter == null || filter == "") return;
            filter = JSON.parse(filter);
            for (var i = 0, len = filter.length; i < len; i++) {
                if (filter[i] != null) $("#" + filter[i].Field).val(filter[i].Value);
            }
        }

</script>
}


